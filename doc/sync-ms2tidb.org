#+OPTIONS: ^:nil

* Diagram
** Architect of Data sync from tidb to sqlserver
   PoC to test the data sync from TiDB to SqlServer thrugh Aurora. So far, there is no approach to sync data from TiDB to SQLServer directly.
 To achieve the near-realtime data sync from TiDB to SQL Server, add SQLServer and DMS.
 [[./png/TiDBCloud2MS.png]]

#+BEGIN_COMMENT
  #+ATTR_HTML: :width 70%
  file:./png/TiDBCloud2MS.png
#+END_COMMENT

   | Resource Name             | # Of resources |
   |---------------------------+----------------|
   | VPC                       |              4 |
   | Subnets                   |              8 |
   | Route table               |              4 |
   | Security Group            |              4 |
   | DB Cluster Parameter      |              1 |
   | DB Parameter Parameter    |              1 |
   | DB Subnet group           |              1 |
   | Aurora cluster            |              1 |
   | Aurora Instance           |              1 |
   | DMS subnet group          |              1 |
   | DMS endpoints             |              2 |
   | DMS Replication instance  |              1 |
   | DMS Replication task      |              1 |
   | SQLServer                 |              1 |
   | Routes                    |             13 |
   | Transit Gateway           |              1 |
   | TransitGateway Attachment |              4 |
   | Internet Gateway          |              1 |

* How to setup the aws environment
** Setup aws local environment.
** Prepare config file be below command
*** Prepare the yaml config file by template command
    #+BEGIN_SRC
$ aws tidb2ms template tidbcloud2ms-prod    > /tmp/tidbcloud2ms-prod.yaml
global:
  user: tidb                                       <- User to login the server to run aws script
  db_host: localhost
workstation:
  cidr: 172.81.0.0/16
  instance_type: m5.4xlarge
  keyname: key-name                                <- Public key name to login the workstation server
  keyfile: /home/tidb/.ssh/key-name.pem            <- Private key file usded to login the workstation server
  username: admin                                  <- User name to login
  imageid: ami-0c7ea5497c02abcaf
aurora:
  cidr: 172.83.0.0/16
  instance_type: db.m5.8xlarge
sqlserver:
  cidr: 172.85.0.0/16
  instance_type: m5.2xlarge
  keyname: jay-west
  imageid: ami-00dcbd817ce3d7a77
dms:
  cidr: 172.86.0.0/16
  instance_type: m5.2xlarge
#+END_SRC

   [[./png/tidbcloud2ms-01.png]]
   [[./png/tidbcloud2ms-02.png]]
*** Create all the AWS resources
   [[./png/tidbcloud2ms-03.png]]
*** Create the VPC peering from TiDB Cloud
It will take about half hour to complete all the resources preparation.

   [[./png/tidbcloud2ms-04.png]]
*** Accept all the VPC Peering
   [[./png/tidbcloud2ms-05.png]]

   [[./png/tidbcloud2ms-06.png]]
*** Config the TiCDC to sync data to aurora
   [[./png/tidbcloud2ms-07.png]]
   


** Deploy all the AWS resources for test.
#+BEGIN_SRC
$ aws tidb2ms deploy tidbcloud2ms /tmp/tidbcloud2ms-prod.yaml
#+END_SRC


  #+CAPTION: Data Migration from SQL Server to TiDB
  [[./png/ms2ti.png]]
#+BEGIN_COMMENT
  #+BEGIN_SRC plantuml :file ./png/ms2ti.png
  !theme spacelab
  left to right direction
  database "SQL Server" {
    folder "Souce DB" {
      [Source Schema]
    }
  }
  database "TiDB" {
    folder "Destination DB" {
      [Destination Schema]
    }
  }
  () "Producer"
  () "Consumer"
  queue kafka

  [Source Schema] --> Producer
  Producer --> kafka
  kafka --> Consumer
  Consumer --> [Destination Schema]
  #+END_SRC
#+END_COMMENT

* Format the source code
   | File name                  | Done  |
   |----------------------------+-------|
   | vpc.go                     | 12/18 |
   | network                    |       |
   | route_table                |       |
   | security_group             |       |
   | ec2                        |       |
   | db_subnet                  |       |
   | rds                        |       |
   | db_parameter               |       |
   | db_cluster_parameter       |       |
   | dms_subnet                 |       |
   | dms_endpoints              |       |
   | dms_replication_instance   |       |
   | dms_replication_task       |       |
   | transit_gateway            |       |
   | transit_gateway_attachment |       |
   | vpc_peering                |       |


* TOD
** Added the image name
aws ec2 describe-images --filters "Name=name,Values=debian-10-amd64*" "Name=architecture,Values=x86_64" "Name=hypervisor,Values=xen" "Name=image-type,Values=machine" "Name=is-public,Values=true" "Name=block-device-mapping.volume-type,Values=gp2" --query 'reverse(sort_by(Images, &CreationDate))[:1]'
** Replace the sqlserver node to rds sqlserver
   aws rds create-db-parameter-group --db-parameter-group-name tisample --db-parameter-group-family sqlserver-se-15.0 --description "db parameter for sqlserver"
   aws rds create-db-subnet-group --db-subnet-group-name testtisample --db-subnet-group-description "testing" --subnet-ids '["subnet-0f78be7da103d0e2a","subnet-026307a8b552aff87","subnet-023738198dc3ee489"]'
   aws rds create-db-instance --db-instance-identifier testtisample-sqlserver --db-instance-class db.m5d.large --engine sqlserver-se --master-username master --master-user-password 1234Abcd --vpc-security-group-ids sg-0b31e630482957f40 --db-subnet-group-name testtisample-sqlserver --db-parameter-group-name tisample --engine-version 15.00.4073.23.v1 --license-model license-included --allocated-storage 100 --backup-retention-period 0
** Run from the third node like aws node
** Added version config for TiDB
** Add disk to EC2 nodes
** Add list function to show all the data
** Add NLB before TiDB
** Add local tidb
