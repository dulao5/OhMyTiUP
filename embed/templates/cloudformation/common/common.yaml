# Resources:
#   vpc
#   subnet
#   route table
#   security group
#   endpoint -> point to secrets
#   internet gateway -> True/False
#
#
#   secrets
# Input:
#   host/port/user/password -> secrets 
#
#  aws resource
#   1. Create VPC/subnets/route table/end point/security group
#   2. Create secret/policy/role
#   3. Create redshift
#  vpc peering
#   1. Invite vpc from TiDB Cloud (vpc id/cidr)
#   2. Accept from vpc peering from client side
#   3. Add route to TiDB Cloud in the route table with vpc peering
#

AWSTemplateFormatVersion: 2010-09-09
Description: >-
     The template is used to deploy redshift with TiDB Cloud secrets
Parameters:
  ProjectName:
    Description: Project name for Demo
    Type: String
  ComponentName:
    Description: Component name of Demo
    Type: String
  VpcCidr:
    Description: VPC CIDR
    Type: String
    Default: 172.81.0.0/16
  HasInternetGatewayFlag:
    Description: Deploy the internet gateway if TRUE flag
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  HasSecretsManagerEndpointFlag:
    Description: Deploy the secretsmanager endpoint if TRUE flag
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
Conditions:
  HasInternetGateway: !Equals 
    - !Ref HasInternetGatewayFlag
    - true
  HasSecretsManagerEndpoint: !Equals 
    - !Ref HasSecretsManagerEndpointFlag
    - true
Resources:
  theVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Cluster
          Value: !Sub 'ohmytiup-${ProjectName}'
        - Key: Type
          Value: !Sub '${ComponentName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}'

  theSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: theVPC
      CidrBlock: !Select [ 0, !Cidr [ !Ref VpcCidr, 12, 8  ]  ]
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Cluster
          Value: !Sub 'ohmytiup-${ProjectName}'
        - Key: Type
          Value: !Sub '${ComponentName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}'
  theSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: theVPC
      CidrBlock: !Select [ 1, !Cidr [ !Ref VpcCidr, 12, 8  ]  ]
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Cluster
          Value: !Sub 'ohmytiup-${ProjectName}'
        - Key: Type
          Value: !Sub '${ComponentName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}'
  theRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: theVPC
      Tags:
        - Key: Cluster
          Value: !Sub 'ohmytiup-${ProjectName}'
        - Key: Type
          Value: !Sub '${ComponentName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}'
  SubnetRouteTableAssociation01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: theSubnet01
      RouteTableId:
        Ref: theRouteTable
  SubnetRouteTableAssociation02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: theSubnet02
      RouteTableId:
        Ref: theRouteTable
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow DB access from client
      VpcId:
        Ref: theVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Cluster
          Value: !Sub 'ohmytiup-${ProjectName}'
        - Key: Type
          Value: !Sub '${ComponentName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}'

  theInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: HasInternetGateway
    Properties:
      Tags:
        - Key: Cluster
          Value: !Sub 'ohmytiup-${ProjectName}'
        - Key: Type
          Value: !Sub '${ComponentName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}'
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: HasInternetGateway
    Properties: 
      InternetGatewayId: 
        Ref: theInternetGateway
      VpcId: 
        Ref: theVPC
  SecretsmanagerEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: HasSecretsManagerEndpoint
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetIds:
        - !Ref theSubnet01
        - !Ref theSubnet02
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      VpcId: !Ref theVPC
